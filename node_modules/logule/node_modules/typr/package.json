{
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "name": "typr",
  "description": "Mutually exclusive type testing",
  "version": "0.2.1",
  "stability": "locked",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/typr"
  },
  "engines": {
    "node": ">=0.8"
  },
  "main": "index.js",
  "scripts": {
    "test": "$(npm bin)/nodeunit --reporter=verbose test/*.js",
    "coveralls": "$(npm bin)/jscoverage lib && TYPR_COV=1 $(npm bin)/nodeunit --reporter=lcov test | $(npm bin)/coveralls"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "~0.9.0",
    "jscoverage": "~0.5.4",
    "coveralls": "~2.11.1"
  },
  "bugs": {
    "url": "http://github.com/clux/typr/issues"
  },
  "license": "MIT",
  "readme": "# typr\n[![npm status](http://img.shields.io/npm/v/typr.svg)](https://www.npmjs.org/package/typr)\n[![build status](https://secure.travis-ci.org/clux/typr.svg)](http://travis-ci.org/clux/typr)\n[![dependency status](https://david-dm.org/clux/typr.svg)](https://david-dm.org/clux/typr)\n[![coverage status](http://img.shields.io/coveralls/clux/typr.svg)](https://coveralls.io/r/clux/typr)\n[![locked](http://img.shields.io/badge/stability-locked-14C6C6.svg)](http://nodejs.org/api/documentation.html#documentation_stability_index)\n\n## Mutually Exclusive JS Type Testring\nThe aim of this module is to completely partition the set of JS objects into a set of types T:\n\n```\nT = [Function, Object, Date, Number, String, Boolean, RegExp, Undefined, Arguments, Null, Array]\n```\n\n*Prop. 1* For every JS object x, x has exactly one type in T where [typr] returns true for its typecheck.\n\n*Prop. 2* Whether or not an Object has keys and can be looped over is determined by `t.hasKeys` and is completely independent of the type found in prop 1.\n\n*Prop. 3* Number types can be partitioned into 3 sub-types:\n\n- isNaN\n- isInfinite\n- isNumeric i.e. !isNaN && !isInfinite\n\n\nThese properties are tested extensively.\n\n## Usage\nBasic usage:\n\n```javascript\nvar typr = require('typr');\ntypr.isFunction(el); // true iff el is a function\n```\n\nRead the very short [API](https://github.com/clux/typr/master/api.md).\n\n### Object Keys\nThe reason for prop 2 is that Objects can masquerade othes instances like\nFunctions, Strings, RegExps, Dates. Object.keys() (and for-in) will actually work on some\nof these. This does not mean they will have interesting keys, but they sometimes\ndo!\n\nA common trick in node modules to export a function, but additionally attach\nproperties to it. Such an object will only be a Function by our partitioning\n(as that was its original construction), but it is Object-like.\n\nIf you would rather test for enumerability of properties, use the extra test for Object-likeness: `hasKeys`.\n\nNote again that this may not be super intuitive:\n\n```javascript\nvar dualThing = new String(\"wee\");\ndualThing.prop = \"hi\";\nObject.keys(dualThing); // [ '0', '1', '2', 'prop' ]\n\nt.isObject(dualThing); // false\nt.isString(dualThing); // true\nt.hasKeys(dualThing); // true\n```\n\n## Installation\n\n```bash\n$ npm install typr\n```\n\n## Running tests\nInstall development dependencies\n\n```bash\n$ npm install\n```\n\nRun the tests\n\n```bash\n$ npm test\n```\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/clux/typr",
  "_id": "typr@0.2.1",
  "_shasum": "585ef4ceea53e51feb6fbb6617bcc7cbe3ab4e1b",
  "_from": "typr@~0.2.0",
  "_resolved": "https://registry.npmjs.org/typr/-/typr-0.2.1.tgz"
}
